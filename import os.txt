import os
import re
import requests
from datetime import datetime

NOTION_TOKEN = os.getenv("NOTION_TOKEN")
DATABASE_ID = os.getenv("NOTION_DATABASE_ID")
LOG_FILE = r"D:\MAGIC\outputs\logs\master_orchestrator_log.txt"

headers = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Content-Type": "application/json",
    "Notion-Version": "2022-06-28"
}

# --- Read orchestrator log ---
with open(LOG_FILE, "r", encoding="utf-8", errors="ignore") as log:
    content = log.read()

# Extract script names with PASS
pass_scripts = re.findall(r"Running:\s+(.*?)\s+.*?executed successfully", content, re.S)
error_scripts = re.findall(r"(?:ERROR|Exception|Traceback).*?(\w+_READY\.py)", content, re.S)

print(f"‚úÖ Found {len(pass_scripts)} passing scripts, {len(error_scripts)} with errors.")

# --- Query all Phase 11 entries from Notion ---
url_query = f"https://api.notion.com/v1/databases/{DATABASE_ID}/query"
res = requests.post(url_query, headers=headers)
pages = res.json().get("results", [])

# --- Update each matching page ---
for page in pages:
    props = page["properties"]
    filename = props["Filename"]["title"][0]["text"]["content"]

    new_status = None
    note = None

    if filename in pass_scripts:
        new_status = "Stub PASS ‚úÖ"
        note = f"Auto-updated {datetime.now().strftime('%Y-%m-%d %H:%M')} | All tests passed."
    elif filename in error_scripts:
        new_status = "Error ‚ùå"
        note = f"Auto-updated {datetime.now().strftime('%Y-%m-%d %H:%M')} | Errors found."
    
    if new_status:
        update_url = f"https://api.notion.com/v1/pages/{page['id']}"
        data = {
            "properties": {
                "Status": {"select": {"name": new_status}},
                "Notes": {"rich_text": [{"text": {"content": note}}]}
            }
        }
        requests.patch(update_url, headers=headers, json=data)
        print(f"üîÑ Updated {filename} ‚Üí {new_status}")

print("üéØ Notion sync complete.")
