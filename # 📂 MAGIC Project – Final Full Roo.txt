# ðŸ“‚ MAGIC Project â€“ Final Full Root Structure with Rule Mapping, AI Logic, and Documentation Layer

This structure represents the complete automation and self-healing architecture of the MAGIC project, incorporating all agents, flows, logic routes, documentation references, health checks, audit logs, and AI-human explanation support discussed across 22 rulebook phases.

---

## ðŸ”§ Root Directory: `D:/MAGIC/`

---

### 1. `agents/` â€“ Self-Healing Agents, Watchdogs, & Monitors

Organized by function, logic category, and mapped to 22-phase rulebook.

```
agents/
â”œâ”€â”€ general/                        # General routing, fallback, naming, escalators
â”‚   â”œâ”€â”€ inbox_reloader.py
â”‚   â”œâ”€â”€ hold_escalator.py
â”‚   â”œâ”€â”€ approval_router.py
â”‚   â”œâ”€â”€ auto_review_recovery.py
â”‚   â”œâ”€â”€ quarantine_detector.py
â”‚   â””â”€â”€ move_logger.py
â”‚
â”œâ”€â”€ phase_sorters/                 # Sorts by script naming (00A_, 03B_, etc.) into phase folders
â”‚   â”œâ”€â”€ phase0_sorter.py
â”‚   â”œâ”€â”€ phase1_sorter.py
â”‚   â””â”€â”€ ...
â”‚   â””â”€â”€ phase17_sorter.py
â”‚
â”œâ”€â”€ drift_protection/              # Detects misplacement, duplicates, missing links
â”‚   â”œâ”€â”€ phase_mismatch_checker.py
â”‚   â”œâ”€â”€ folder_drift_detector.py
â”‚   â”œâ”€â”€ broken_link_resolver.py
â”‚   â””â”€â”€ duplicate_detector.py
â”‚
â”œâ”€â”€ damage_prevention/             # Guards against critical mistakes
â”‚   â”œâ”€â”€ vault_guard.py             # Prevents movement of _LOCKED files
â”‚   â”œâ”€â”€ config_sync_checker.py     # Monitors uncommitted config edits
â”‚   â””â”€â”€ phase_skipper_guard.py     # Detects skipped phases
â”‚
â”œâ”€â”€ stale_cleanup/                 # Deletes/moves unused or old files
â”‚   â”œâ”€â”€ unused_file_pruner.py
â”‚   â”œâ”€â”€ log_cleanup_agent.py
â”‚   â”œâ”€â”€ stranded_file_sentinel.py
â”‚   â””â”€â”€ ghost_file_detector.py
â”‚
â”œâ”€â”€ recovery/                      # Self-healing, restoration, linting, re-documentation
â”‚   â”œâ”€â”€ auto_restore.py
â”‚   â”œâ”€â”€ script_health_monitor.py
â”‚   â”œâ”€â”€ phase_summary_writer.py
â”‚   â””â”€â”€ agent_error_catcher.py
â”‚
â”œâ”€â”€ awareness/                     # Health checks and structural integrity
â”‚   â””â”€â”€ system_heartbeat.py        # Checks folder and config existence
â”‚
â”œâ”€â”€ meta/                          # Master controllers and config monitors
â”‚   â”œâ”€â”€ agent_runner.py            # Executes all agents
â”‚   â”œâ”€â”€ config_watcher.py
â”‚   â””â”€â”€ index_builder.py           # Generates live file_index.csv
â”‚
â”œâ”€â”€ docs/                          # Agent explainers for humans & AI
â”‚   â””â”€â”€ *.md                       # Per-agent documentation (logic, risk, flow)
â”‚
â”œâ”€â”€ README_agents.md              # Explains each agent groupâ€™s purpose
â”œâ”€â”€ agents_index.csv              # Index of agent triggers, categories, phase mapping
```

---

### 2. `scripts/` â€“ Executable Core Scripts Sorted by Phase

Scripts are tagged as `03B_toolname_READY.py` or `_HOLD`, `_REVIEW` for routing.

```
scripts/
â”œâ”€â”€ phase0/
â”œâ”€â”€ phase1/
â”œâ”€â”€ ...
â””â”€â”€ phase17/
```

---

### 3. `inbox/` â€“ Central Drop Folder

All incoming files land here. Routed by naming tags.

---

### 4. `hold/` â€“ TEMP Staging for `_HOLD.py`

Escalated or reclassified by `hold_escalator.py`

---

### 5. `review/` â€“ Human Review Queue

Files marked `_REVIEW.py` go here for manual checks.

---

### 6. `approved/` â€“ Passed Files

Files marked `_APPROVED.py` get stored here.

---

### 7. `quarantine/` â€“ Suspicious Files Holding Zone

Used by fallback agents like `quarantine_detector.py` and `agent_error_catcher.py`

---

### 8. `cold_storage/` â€“ Archived Safe Files

Older than 30 days, not modified â€” stored by `unused_file_pruner.py`

---

### 9. `outputs/` â€“ Generated Results, Reports, Data

```
outputs/
â”œâ”€â”€ data/         # Clean structured output files (.csv, .json)
â”œâ”€â”€ trends/       # Platform trends from Reddit, YouTube, Twitter
â”œâ”€â”€ reports/      # Final results, summaries, evaluations
â”œâ”€â”€ metrics/      # Auto-generated agent statistics and status logs
```

---

### 10. `logs/` â€“ Agent & Rule Logs

```
logs/
â”œâ”€â”€ archive/       # Compressed old logs
â”œâ”€â”€ config/        # Config warnings & watch logs
â”œâ”€â”€ agents/        # Logs from self-healing agents
â”œâ”€â”€ lint_log.csv   # Output from script_health_monitor.py
â”œâ”€â”€ automation_log.csv # Full move log from move_logger.py
â”œâ”€â”€ agent_errors.csv   # Captures exceptions in agent execution
```

---

### 11. `docs/` â€“ Reference & System Explanation Files

```
docs/
â”œâ”€â”€ naming_conventions.md
â”œâ”€â”€ magic_phases.md
â”œâ”€â”€ rulebook.md                   # Full 22-phase rule mapping
â”œâ”€â”€ self_healing_root_structure.md
â”œâ”€â”€ versioning_policy.md
â”œâ”€â”€ README.md
â”œâ”€â”€ MAGIC_overview.md            # Top-level doc for new contributors
â”œâ”€â”€ flowcharts/
â”‚   â”œâ”€â”€ file_lifecycle_flow.png
â”‚   â””â”€â”€ escalation_decision_tree.png
```

---

### 12. `tests/` â€“ Dry Runs, Dummy Data, QA Scripts

Test coverage for agents, escalation, routing logic, and fallback scenarios.

```
tests/
â”œâ”€â”€ dummy_scripts/
â”œâ”€â”€ review_simulation/
â”œâ”€â”€ error_case_generator.py
â”œâ”€â”€ test_runner.py
â””â”€â”€ test_coverage.md
```

---

### 13. `venv/` â€“ Python Virtual Environment

Ignored by Git, used for dependency isolation

---

### 14. `.git/` â€“ Git Metadata

Managed by version control system

---

### âœ… Embedded AI-Human Support Layer

| File / Folder                          | Purpose                                                       | Status       |
| -------------------------------------- | ------------------------------------------------------------- | ------------ |
| `agents/awareness/system_heartbeat.py` | Check if all key folders/configs exist                        | ðŸ”² Not yet   |
| `agents/meta/index_builder.py`         | Generate fresh `file_index.csv` from root                     | ðŸ”² Suggested |
| `agents/README_agents.md`              | Human-readable doc per agent category                         | ðŸ”² Suggested |
| `agents_index.csv`                     | Master table: Agent â†’ Trigger â†’ Folder â†’ Rule Phase â†’ Status  | ðŸ”² Suggested |
| `agents/.../*.md`                      | Each agent has explainer doc (trigger, logic, risk, fallback) | ðŸ”² Suggested |

---

âœ… This refined structure ensures:

* Full traceability of every rule, file, agent, and phase
* Human + AI collaboration in automation workflows
* Scalable and self-documenting infrastructure

Would you like me to now scaffold:

* All agent `.md` explainers?
* Starter `README_agents.md`?
* `agents_index.csv` with column structure?

Say the word and Iâ€™ll launch that phase.
